#!/usr/bin/awk -f

function usage() {
	print("USAGE: mucks [mucksrc]")
}

function join(a, skip, _, i, s) {
	for (i in a) {
		if (!skip || i > 1) {
			s = s " " a[i]
		}
	}
	return s
}

function mux(name, cmd) {
	if (CONFIG["mux"] == name) {
		system(cmd)
	}
}

function id() {
	if (length(PROCINFO["pid"]) > 0) {
		return "mucks" PROCINFO["pid"];
	} else {
		if (!_id) _id = systime();
		return "mucks" _id;
	}
}

function esc(s, _) {
	_ = s
	gsub(/\\/, "\\\\", _)
	gsub(/\"/, "\\\"", _)
	return "\"" _ "\""
}

function head() {
	if (CONFIG["mux"] == "tmux") {
		return "tmux -S " CONFIG["tmpdir"] "/" id()
	} else if (CONFIG["mux"] == "screen") {
		return "screen " id()
	}
}

function finish() {
	mux("tmux", head() " attach-session -t " id() "; rm -f " CONFIG["tmpdir"] "/" id())
}

function mux_new_window(section, _, cmd) {
	if (!FIRST_WINDOW) {
		FIRST_WINDOW=1
		cmd = "cd " CONFIG["dir"] 
		if (CONFIG["pre"]) {
			cmd = cmd "; eval " CONFIG["pre"] "; cd " CONFIG["dir"]
		}
		if (CONFIG["name"]) {
			printf("\033]0;" CONFIG["name"] "\a")
		}
		mux("tmux", cmd "; " head() " new-session -d -s " id() " -n " esc(section))
	} else {
		mux("tmux", "cd " CONFIG["dir"] "; " head() " new-window -n " esc(section))
	}
	if (CONFIG["prewnd"]) {
		mux_send(CONFIG["prewnd"])
	}
}

function mux_internal(command, _, args, i, tail) {
	if (command == "split") {
		mux("tmux", head() " split-window -h")
		return
	}
	split(command, args, /[[:space:]]+/)
	if (args[1] == "sh") {
		system(join(args, 1))
		return
	}
	if (args[1] == CONFIG["mux"]) {
		system(head() " " join(args, 1))
	}
}

function mux_send(text) {
	mux("tmux", head() " send-keys " esc(text) " C-m")
}

function process(f, _, section, header_flag, s, k, v) {
	header_flag = 0;
	for (;;) {
		if ((getline < f) <= 0) {
			break
		}
		sub(/#.*$/, "")
		if (length($0) > 0) {
			if ($0 ~ /\[[^ ].*\]/) {        # Create secion
				header_flag = 1
				section = substr($0, 2, length($0) - 2)
				mux_new_window(section)
			} else if (header_flag == 0) {  # Parse header
				s = $0; sub(/[[:space:]]*:[^:]*$/, "", s); k = s;
				s = $0; sub(/^[^:]*:[[:space:]]*/, "", s); v = s;
				CONFIG[k] = v
			} else {                        # Parse window input
				if ($0 ~ /^-/) {
					sub(/^-[[:space:]]*/, "")
					mux_internal($0)
				} else {
					mux_send($0)
				}
			}
		}
	}
	finish()
}

function main() {
	CONFIG["mux"] = "tmux"
	CONFIG["dir"] = "."
	if (length(ENVIRON["TMPDIR"]) > 0) {
		CONFIG["tmpdir"] = ENVIRON["TMPDIR"]
	} else {
		CONFIG["tmpdir"] = "/tmp"
	}

	if (ARGC == 1) {
		process(".mucksrc")
	} else if (ARGC == 2) {
		process(ARGV[1])
	} else if (ARGC > 1) {
		usage()
	}
}

BEGIN {
	main()
	exit
}
